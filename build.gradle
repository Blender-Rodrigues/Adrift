import org.gradle.internal.os.OperatingSystem

// Specify repositories we'd like to fetch libraries from
repositories {
    jcenter()
    mavenCentral()

    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
}

// Plugins so gradle would take some assumptions about the project setup
apply plugin: "java"
apply plugin: "idea"

// Pick for which platform the build result is going to be applied to.
switch (OperatingSystem.current()) {
    case OperatingSystem.LINUX:
        def osArch = System.getProperty("os.arch")
        project.ext.lwjglNatives = (
            osArch.startsWith("arm") || osArch.startsWith("aarch64")
                ? "natives-linux-${osArch.contains("64") || osArch.startsWith("armv8") ? "arm64" : "arm32"}"
                : "natives-linux"
        )
        break
    case OperatingSystem.WINDOWS:
        project.ext.lwjglNatives = "natives-windows"
        break
    case OperatingSystem.MAC_OS:
        project.ext.lwjglNatives = "natives-macos"
        break
}

project.ext.lwjglVersion = "3.2.3"

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

archivesBaseName = 'escape-from-eros'
version = '0.5'
group = 'ee.taltech.iti0200'

sourceSets.main.java.srcDirs = ['src/main/java']
sourceSets.main.resources.srcDirs = ['src/main/resources']
sourceSets.test.java.srcDirs = ['src/test/java']
sourceSets.test.resources.srcDirs = ['src/test/resources']

test {
    useJUnitPlatform()
    testLogging.info.events = ["FAILED", "SKIPPED", "PASSED", "STANDARD_OUT", "STANDARD_ERROR"]
}

dependencies {
    implementation "org.lwjgl:lwjgl-bom:$lwjglVersion"
    implementation "org.lwjgl:lwjgl:$lwjglVersion"
    implementation "org.lwjgl:lwjgl-glfw:$lwjglVersion"
    implementation "org.lwjgl:lwjgl-opencl:$lwjglVersion"
    implementation "org.lwjgl:lwjgl-opengl:$lwjglVersion"
    implementation "org.apache.logging.log4j:log4j-api:2.13.0"
    implementation "org.apache.logging.log4j:log4j-core:2.13.0"
    implementation "javax.vecmath:vecmath:1.5.2"
    implementation "org.joml:joml:1.9.22"
    implementation "com.google.guava:guava:28.2-jre"
    implementation "com.google.inject:guice:4.2.3"
    implementation "com.google.inject.extensions:guice-assistedinject:4.2.3"
    implementation "org.apache.commons:commons-lang3:3.10"

    runtimeOnly "org.lwjgl:lwjgl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-glfw::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-opengl::$lwjglNatives"

    testImplementation "org.assertj:assertj-core:3.11.1"
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.6.0"
    testImplementation "org.junit.jupiter:junit-jupiter-params:5.6.0"
    testImplementation "org.mockito:mockito-core:3.3.3"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:5.6.0"
}

jar {
    manifest {
        attributes "Main-Class": "ee.taltech.iti0200.application.Game"
    }

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}
